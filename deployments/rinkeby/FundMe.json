{
    "address": "0xcFb7135Ab2E82bC1227C5Ce5B8B0E4398fc3a2DF",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeed",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "fundingAddress",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getVersion",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        }
    ],
    "transactionHash": "0x32d6c916612ac9678ea4c7f18e8f1da059ad633dffac85bb843664dbcbf60858",
    "receipt": {
        "to": null,
        "from": "0xe4A98D2bFD66Ce08128FdFFFC9070662E489a28E",
        "contractAddress": "0xcFb7135Ab2E82bC1227C5Ce5B8B0E4398fc3a2DF",
        "transactionIndex": 9,
        "gasUsed": "1053049",
        "logsBloom": "0x
        "blockHash": "0xc7987971e2083ba25fdcbfc01b2dbd2c7f7f318575672289739090513cf9af35",
        "transactionHash": "0x32d6c916612ac9678ea4c7f18e8f1da059ad633dffac85bb843664dbcbf60858",
        "logs": [],
        "blockNumber": 10932185,
        "cumulativeGasUsed": "4004496",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"],
    "numDeployments": 2,
    "solcInputHash": "aa7ff0ab37c54173c90e232bec7fe0a8",
    "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Rohan Zarathustra\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Rohan Zarathustra\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x29c543f4efa647143bafb1143e83e10dba0df049b365e7c4f15c08248e6a61c3\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        // ABI\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x170ceb0ddf33ca68d781318670757b2167ca44884364bde4e8a459970ff62728\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b506040516200133a3803806200133a8339818101604052810190620000379190620000cd565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c6111ad6200018d600039600081816102c101528181610454015281816104fa01528181610685015261087b01526111ad6000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b44565b6101cf565b6040516100bf9190610d24565b60405180910390f35b3480156100d457600080fd5b506100dd610218565b6040516100ea9190610d24565b60405180910390f35b6100fb6102bf565b005b34801561010957600080fd5b506101126104e9565b60405161011f9190610d24565b60405180910390f35b34801561013457600080fd5b5061013d6104f6565b60405161014a9190610cce565b60405180910390f35b34801561015f57600080fd5b5061016861051e565b6040516101759190610ce9565b60405180910390f35b610186610548565b005b610190610683565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610b71565b610911565b6040516101c69190610cce565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190610b9e565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610344576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103ef5760008082815481106103695761036861108c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103e790610fe5565b915050610347565b50600067ffffffffffffffff81111561040b5761040a6110bb565b5b6040519080825280602002602001820160405280156104395781602001602082028036833780820191505090505b506000908051906020019061044f929190610a34565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161049690610cb9565b60006040518083038185875af1925050503d80600081146104d3576040519150601f19603f3d011682016040523d82523d6000602084013e6104d8565b606091505b50509050806104e657600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610587600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095890919063ffffffff16565b10156105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90610d04565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106179190610d5b565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610708576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561078b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610741575b5050505050905060005b81518110156108165760008282815181106107b3576107b261108c565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061080e90610fe5565b915050610795565b50600067ffffffffffffffff811115610832576108316110bb565b5b6040519080825280602002602001820160405280156108605781602001602082028036833780820191505090505b5060009080519060200190610876929190610a34565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108bd90610cb9565b60006040518083038185875af1925050503d80600081146108fa576040519150601f19603f3d011682016040523d82523d6000602084013e6108ff565b606091505b505090508061090d57600080fd5b5050565b60008082815481106109265761092561108c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061096483610994565b90506000670de0b6b3a7640000858361097d9190610ef9565b6109879190610db1565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190610bcb565b5050509150506402540be40081610a2c9190610de2565b915050919050565b828054828255906000526020600020908101928215610aad579160200282015b82811115610aac5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a54565b5b509050610aba9190610abe565b5090565b5b80821115610ad7576000816000905550600101610abf565b5090565b600081359050610aea8161111b565b92915050565b600081519050610aff81611132565b92915050565b600081359050610b1481611149565b92915050565b600081519050610b2981611149565b92915050565b600081519050610b3e81611160565b92915050565b600060208284031215610b5a57610b596110ea565b5b6000610b6884828501610adb565b91505092915050565b600060208284031215610b8757610b866110ea565b5b6000610b9584828501610b05565b91505092915050565b600060208284031215610bb457610bb36110ea565b5b6000610bc284828501610b1a565b91505092915050565b600080600080600060a08688031215610be757610be66110ea565b5b6000610bf588828901610b2f565b9550506020610c0688828901610af0565b9450506040610c1788828901610b1a565b9350506060610c2888828901610b1a565b9250506080610c3988828901610b2f565b9150509295509295909350565b610c4f81610f53565b82525050565b610c5e81610faf565b82525050565b6000610c71601b83610d4a565b9150610c7c826110ef565b602082019050919050565b6000610c94600083610d3f565b9150610c9f82611118565b600082019050919050565b610cb381610f8f565b82525050565b6000610cc482610c87565b9150819050919050565b6000602082019050610ce36000830184610c46565b92915050565b6000602082019050610cfe6000830184610c55565b92915050565b60006020820190508181036000830152610d1d81610c64565b9050919050565b6000602082019050610d396000830184610caa565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d6682610f8f565b9150610d7183610f8f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610da657610da561102e565b5b828201905092915050565b6000610dbc82610f8f565b9150610dc783610f8f565b925082610dd757610dd661105d565b5b828204905092915050565b6000610ded82610f65565b9150610df883610f65565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e3757610e3661102e565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e7457610e7361102e565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610eb157610eb061102e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610eee57610eed61102e565b5b828202905092915050565b6000610f0482610f8f565b9150610f0f83610f8f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4857610f4761102e565b5b828202905092915050565b6000610f5e82610f6f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610fba82610fc1565b9050919050565b6000610fcc82610fd3565b9050919050565b6000610fde82610f6f565b9050919050565b6000610ff082610f8f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110235761102261102e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61112481610f53565b811461112f57600080fd5b50565b61113b81610f65565b811461114657600080fd5b50565b61115281610f8f565b811461115d57600080fd5b50565b61116981610f99565b811461117457600080fd5b5056fea264697066735822122034bf5b510e7b28f39452619288890bff251f05b9cf483516fd41c3018745dc9a64736f6c63430008070033",
    "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b44565b6101cf565b6040516100bf9190610d24565b60405180910390f35b3480156100d457600080fd5b506100dd610218565b6040516100ea9190610d24565b60405180910390f35b6100fb6102bf565b005b34801561010957600080fd5b506101126104e9565b60405161011f9190610d24565b60405180910390f35b34801561013457600080fd5b5061013d6104f6565b60405161014a9190610cce565b60405180910390f35b34801561015f57600080fd5b5061016861051e565b6040516101759190610ce9565b60405180910390f35b610186610548565b005b610190610683565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610b71565b610911565b6040516101c69190610cce565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190610b9e565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610344576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103ef5760008082815481106103695761036861108c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103e790610fe5565b915050610347565b50600067ffffffffffffffff81111561040b5761040a6110bb565b5b6040519080825280602002602001820160405280156104395781602001602082028036833780820191505090505b506000908051906020019061044f929190610a34565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161049690610cb9565b60006040518083038185875af1925050503d80600081146104d3576040519150601f19603f3d011682016040523d82523d6000602084013e6104d8565b606091505b50509050806104e657600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610587600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095890919063ffffffff16565b10156105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90610d04565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106179190610d5b565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610708576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561078b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610741575b5050505050905060005b81518110156108165760008282815181106107b3576107b261108c565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061080e90610fe5565b915050610795565b50600067ffffffffffffffff811115610832576108316110bb565b5b6040519080825280602002602001820160405280156108605781602001602082028036833780820191505090505b5060009080519060200190610876929190610a34565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108bd90610cb9565b60006040518083038185875af1925050503d80600081146108fa576040519150601f19603f3d011682016040523d82523d6000602084013e6108ff565b606091505b505090508061090d57600080fd5b5050565b60008082815481106109265761092561108c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061096483610994565b90506000670de0b6b3a7640000858361097d9190610ef9565b6109879190610db1565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190610bcb565b5050509150506402540be40081610a2c9190610de2565b915050919050565b828054828255906000526020600020908101928215610aad579160200282015b82811115610aac5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a54565b5b509050610aba9190610abe565b5090565b5b80821115610ad7576000816000905550600101610abf565b5090565b600081359050610aea8161111b565b92915050565b600081519050610aff81611132565b92915050565b600081359050610b1481611149565b92915050565b600081519050610b2981611149565b92915050565b600081519050610b3e81611160565b92915050565b600060208284031215610b5a57610b596110ea565b5b6000610b6884828501610adb565b91505092915050565b600060208284031215610b8757610b866110ea565b5b6000610b9584828501610b05565b91505092915050565b600060208284031215610bb457610bb36110ea565b5b6000610bc284828501610b1a565b91505092915050565b600080600080600060a08688031215610be757610be66110ea565b5b6000610bf588828901610b2f565b9550506020610c0688828901610af0565b9450506040610c1788828901610b1a565b9350506060610c2888828901610b1a565b9250506080610c3988828901610b2f565b9150509295509295909350565b610c4f81610f53565b82525050565b610c5e81610faf565b82525050565b6000610c71601b83610d4a565b9150610c7c826110ef565b602082019050919050565b6000610c94600083610d3f565b9150610c9f82611118565b600082019050919050565b610cb381610f8f565b82525050565b6000610cc482610c87565b9150819050919050565b6000602082019050610ce36000830184610c46565b92915050565b6000602082019050610cfe6000830184610c55565b92915050565b60006020820190508181036000830152610d1d81610c64565b9050919050565b6000602082019050610d396000830184610caa565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d6682610f8f565b9150610d7183610f8f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610da657610da561102e565b5b828201905092915050565b6000610dbc82610f8f565b9150610dc783610f8f565b925082610dd757610dd661105d565b5b828204905092915050565b6000610ded82610f65565b9150610df883610f65565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e3757610e3661102e565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e7457610e7361102e565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610eb157610eb061102e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610eee57610eed61102e565b5b828202905092915050565b6000610f0482610f8f565b9150610f0f83610f8f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4857610f4761102e565b5b828202905092915050565b6000610f5e82610f6f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610fba82610fc1565b9050919050565b6000610fcc82610fd3565b9050919050565b6000610fde82610f6f565b9050919050565b6000610ff082610f8f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110235761102261102e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61112481610f53565b811461112f57600080fd5b50565b61113b81610f65565b811461114657600080fd5b50565b61115281610f8f565b811461115d57600080fd5b50565b61116981610f99565b811461117457600080fd5b5056fea264697066735822122034bf5b510e7b28f39452619288890bff251f05b9cf483516fd41c3018745dc9a64736f6c63430008070033",
    "devdoc": {
        "author": "Rohan Zarathustra",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "getAddressToAmountFunded(address)": {
                "params": {
                    "fundingAddress": "the address of the funder"
                },
                "returns": {
                    "_0": "the amount funded"
                }
            }
        },
        "title": "A sample Funding Contract",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "Funds our contract based on the ETH/USD price"
            },
            "getAddressToAmountFunded(address)": {
                "notice": "Gets the amount that an address has funded"
            }
        },
        "notice": "This contract is for creating a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 67,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 71,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
